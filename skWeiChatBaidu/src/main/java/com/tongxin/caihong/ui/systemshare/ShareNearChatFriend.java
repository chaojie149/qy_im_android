package com.tongxin.caihong.ui.systemshare;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.os.Bundle;import android.text.Editable;import android.text.TextUtils;import android.text.TextWatcher;import android.view.Gravity;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.BaseAdapter;import android.widget.ListView;import android.widget.TextView;import com.tongxin.caihong.R;import com.tongxin.caihong.Reporter;import com.tongxin.caihong.bean.Friend;import com.tongxin.caihong.bean.RoomMember;import com.tongxin.caihong.bean.message.ChatMessage;import com.tongxin.caihong.bean.message.XmppMessage;import com.tongxin.caihong.broadcast.MsgBroadcast;import com.tongxin.caihong.db.dao.ChatMessageDao;import com.tongxin.caihong.db.dao.FriendDao;import com.tongxin.caihong.db.dao.RoomMemberDao;import com.tongxin.caihong.helper.DialogHelper;import com.tongxin.caihong.helper.LoginHelper;import com.tongxin.caihong.helper.UploadEngine;import com.tongxin.caihong.socket.EMConnectionManager;import com.tongxin.caihong.ui.MainActivity;import com.tongxin.caihong.ui.SplashActivity;import com.tongxin.caihong.ui.base.BaseActivity;import com.tongxin.caihong.ui.message.InstantMessageConfirm;import com.tongxin.caihong.util.Constants;import com.tongxin.caihong.util.DeviceInfoUtil;import com.tongxin.caihong.util.PreferenceUtils;import com.tongxin.caihong.util.TimeUtils;import com.tongxin.caihong.util.ToastUtil;import com.tongxin.caihong.view.LoadFrame;import com.tongxin.caihong.view.MessageAvatar;import com.tongxin.caihong.view.SearchHeader;import com.tongxin.caihong.xmpp.ListenerManager;import com.tongxin.caihong.xmpp.listener.ChatMessageListener;import java.util.ArrayList;import java.util.List;import java.util.UUID;/** * 分享 最近联系人 */public class ShareNearChatFriend extends BaseActivity implements OnClickListener, ChatMessageListener {    private ListView mShareLv;    private List<Friend> mFriends;    private MessageRecentlyAdapter messageRecentlyAdapter;    private InstantMessageConfirm menuWindow;    private LoadFrame mLoadFrame;    private ChatMessage mShareChatMessage;    private boolean isNeedExecuteLogin;    private BroadcastReceiver mShareBroadCast = new BroadcastReceiver() {        @Override        public void onReceive(Context context, Intent intent) {            if (!TextUtils.isEmpty(intent.getAction())                    && intent.getAction().equals(ShareBroadCast.ACTION_FINISH_ACTIVITY)) {                finish();            }        }    };    public ShareNearChatFriend() {        noLoginRequired();    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_system_share);        // 判断本地登录状态        int userStatus = LoginHelper.prepareUser(mContext, coreManager);        switch (userStatus) {            case LoginHelper.STATUS_USER_FULL:            case LoginHelper.STATUS_USER_NO_UPDATE:            case LoginHelper.STATUS_USER_TOKEN_OVERDUE:                boolean isConflict = PreferenceUtils.getBoolean(this, Constants.LOGIN_CONFLICT, false);                if (isConflict) {                    isNeedExecuteLogin = true;                }                break;            case LoginHelper.STATUS_USER_SIMPLE_TELPHONE:                isNeedExecuteLogin = true;                break;            case LoginHelper.STATUS_NO_USER:            default:                isNeedExecuteLogin = true;        }        if (isNeedExecuteLogin) {// 需要先执行登录操作            startActivity(new Intent(mContext, SplashActivity.class));            finish();            return;        }        coreManager.relogin();// 连接xmpp 发消息需要        mShareChatMessage = new ChatMessage();        if (ShareUtil.shareInit(this, mShareChatMessage)) return;        initActionBar();        loadData();        initView();        initSearch();        ListenerManager.getInstance().addChatMessageListener(this);        registerReceiver(mShareBroadCast, new IntentFilter(ShareBroadCast.ACTION_FINISH_ACTIVITY));    }    private void initSearch() {        SearchHeader shSearch = findViewById(R.id.shSearch);        shSearch.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (TextUtils.isEmpty(s)) {                    messageRecentlyAdapter.setData(mFriends);                } else {                    messageRecentlyAdapter.setData(search(mFriends, s.toString().trim().toLowerCase()));                }            }        });    }    private List<Friend> search(List<Friend> data, String key) {        List<Friend> ret = new ArrayList<>();        for (Friend friend : data) {            if (friend.getShowName().toLowerCase().contains(key)) {                ret.add(friend);            }        }        return ret;    }    @Override    protected void onDestroy() {        super.onDestroy();        ListenerManager.getInstance().removeChatMessageListener(this);    }    private void initActionBar() {        getSupportActionBar().hide();        findViewById(R.id.iv_title_left).setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                finish();            }        });        TextView tvTitle = (TextView) findViewById(R.id.tv_title_center);        tvTitle.setText(getString(R.string.most_recent_contact));    }    private void loadData() {        mFriends = FriendDao.getInstance().getNearlyFriendMsg(coreManager.getSelf().getUserId());        List<Friend> filter = new ArrayList<>();        for (int i = 0; i < mFriends.size(); i++) {            if (mFriends.get(i).getUserId().equals(Friend.ID_NEW_FRIEND_MESSAGE)                    || mFriends.get(i).getUserId().equals(Friend.ID_SK_PAY)                    || mFriends.get(i).getUserId().equals(coreManager.getSelf().getUserId())) {                filter.add(mFriends.get(i));            }        }        mFriends.removeAll(filter);    }    private void initView() {        findViewById(R.id.tv_create_newmessage).setOnClickListener(this);        findViewById(R.id.ll_send_life_circle).setVisibility(View.VISIBLE);        findViewById(R.id.tv_send_life_circle).setOnClickListener(this);        mShareLv = findViewById(R.id.lv_recently_message);        messageRecentlyAdapter = new MessageRecentlyAdapter(mFriends);        mShareLv.setAdapter(messageRecentlyAdapter);        mShareLv.setOnItemClickListener(new OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                // TODO Auto-generated method stub                Friend friend = messageRecentlyAdapter.getData().get(position);                showPopuWindow(view, friend);            }        });    }    private void showPopuWindow(View view, Friend friend) {        if (menuWindow != null) {            menuWindow.dismiss();        }        menuWindow = new InstantMessageConfirm(this, new ClickListener(friend), friend);        menuWindow.showAtLocation(view, Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL, 0, 0);    }    @Override    public void onMessageSendStateChange(int messageState, String msgId) {        if (TextUtils.isEmpty(msgId)) {            return;        }        // 更新消息Fragment的广播        MsgBroadcast.broadcastMsgUiUpdate(mContext);        if (mShareChatMessage != null && TextUtils.equals(mShareChatMessage.getPacketId(), msgId)) {            if (messageState == ChatMessageListener.MESSAGE_SEND_SUCCESS) {// 发送成功                if (mLoadFrame != null) {                    mLoadFrame.change();                }            }        }    }    @Override    public boolean onNewMessage(String fromUserId, ChatMessage message, boolean isGroupMsg) {        return false;    }    /**     * 事件的监听     */    @Override    public void onClick(View v) {        int id = v.getId();        switch (id) {            case R.id.tv_create_newmessage:                verificationShare(1, null);                break;            case R.id.tv_send_life_circle:                verificationShare(2, null);                break;            default:                break;        }    }    private void verificationShare(final int type, Friend friend) {        if (type == 1) {// 选择好友            Intent intent = getIntent();            intent.setClass(ShareNearChatFriend.this, ShareNewFriend.class);            startActivity(intent);        } else if (type == 2) {// 生活圈            Intent intent = getIntent();            intent.setClass(ShareNearChatFriend.this, ShareLifeCircleProxyActivity.class);            startActivity(intent);        } else {// 直接发送            share(friend);        }    }    public void share(Friend friend) {        if (friend.getRoomFlag() != 0) {            if (friend.getGroupStatus() == 1) {                DialogHelper.tip(mContext, getString(R.string.tip_forward_kick));                return;            } else if (friend.getGroupStatus() == 2) {                DialogHelper.tip(mContext, getString(R.string.tip_forward_disbanded));                return;            } else if ((friend.getGroupStatus() == 3)) {                DialogHelper.tip(mContext, getString(R.string.tip_group_disable_by_service));                return;            }            RoomMember roomMember = RoomMemberDao.getInstance().getSingleRoomMember(friend.getRoomId(), coreManager.getSelf().getUserId());            if (roomMember == null || !roomMember.isGroupOwnerOrManager()) {                if (friend.getRoomTalkTime() > (System.currentTimeMillis() / 1000)) {// 禁言时间 > 当前时间 禁言还未结束                    DialogHelper.tip(mContext, getString(R.string.tip_forward_ban));                    return;                }                boolean isAllShutUp = PreferenceUtils.getBoolean(mContext, Constants.GROUP_ALL_SHUP_UP + friend.getUserId(), false);                if (isAllShutUp) {                    DialogHelper.tip(mContext, getString(R.string.tip_now_ban_all));                    return;                }                boolean isAllowSendFile = PreferenceUtils.getBoolean(mContext, Constants.IS_ALLOW_NORMAL_SEND_UPLOAD + friend.getUserId(), true);                if (mShareChatMessage.getType() == ChatMessage.TYPE_FILE && !isAllowSendFile) {                    DialogHelper.tip(mContext, getString(R.string.tip_cannot_upload));                    return;                }                boolean isAllowSendCard = PreferenceUtils.getBoolean(mContext, Constants.IS_SEND_CARD + friend.getUserId(), true);                if (mShareChatMessage.getType() == ChatMessage.TYPE_CARD && !isAllowSendCard) {                    DialogHelper.tip(mContext, getString(R.string.tip_member_disable_privately_chat));                    return;                }            }        }        mLoadFrame = new LoadFrame(ShareNearChatFriend.this);        mLoadFrame.setSomething(getString(R.string.back_last_page), getString(R.string.open_im, getString(R.string.app_name)), new LoadFrame.OnLoadFrameClickListener() {            @Override            public void cancelClick() {                if (DeviceInfoUtil.isOppoRom()) {                    // 调试发现OPPO手机被调起后当前界面不会自动回到后台，手动调一下                    moveTaskToBack(true);                }                finish();            }            @Override            public void confirmClick() {                startActivity(new Intent(ShareNearChatFriend.this, MainActivity.class));                finish();            }        });        mLoadFrame.show();        mShareChatMessage.setFromUserId(coreManager.getSelf().getUserId());        mShareChatMessage.setFromUserName(coreManager.getSelf().getNickName());        mShareChatMessage.setToUserId(friend.getUserId());        mShareChatMessage.setPacketId(UUID.randomUUID().toString().replaceAll("-", ""));        mShareChatMessage.setTimeSend(TimeUtils.sk_time_current_time());        if (friend.getRoomFlag() == 0) {            int isReadDel = PreferenceUtils.getInt(mContext, Constants.MESSAGE_READ_FIRE + friend.getUserId() + coreManager.getSelf().getUserId(), 0);            if (mShareChatMessage.getType() == XmppMessage.TYPE_TEXT                    || mShareChatMessage.getType() == XmppMessage.TYPE_VOICE                    || mShareChatMessage.getType() == XmppMessage.TYPE_IMAGE                    || mShareChatMessage.getType() == XmppMessage.TYPE_VIDEO) {                mShareChatMessage.setIsReadDel(isReadDel);            }        }        switch (mShareChatMessage.getType()) {            case XmppMessage.TYPE_TEXT:                sendMessage(friend);                break;            case XmppMessage.TYPE_IMAGE:            case XmppMessage.TYPE_VIDEO:            case XmppMessage.TYPE_FILE:                if (!mShareChatMessage.isUpload()) {// 未上传                    UploadEngine.uploadImFile(coreManager.getSelfStatus().accessToken, coreManager.getSelf().getUserId(), friend.getUserId(), mShareChatMessage, new UploadEngine.ImFileUploadResponse() {                        @Override                        public void onSuccess(String toUserId, ChatMessage message) {                            sendMessage(friend);                        }                        @Override                        public void onFailure(String toUserId, ChatMessage message) {                            mLoadFrame.dismiss();                            ToastUtil.showToast(ShareNearChatFriend.this, getString(R.string.upload_failed));                        }                    }, false);                } else {// 已上传 自定义表情默认为已上传                    sendMessage(friend);                }                break;            default:                Reporter.unreachable();        }    }    private void sendMessage(Friend friend) {        if (friend.getRoomFlag() == 1) {            coreManager.sendMucChatMessage(friend.getUserId(), mShareChatMessage);        } else {            if (friend.getIsDevice() == 1) {                mShareChatMessage.setFromId(EMConnectionManager.CURRENT_DEVICE);                mShareChatMessage.setToUserName(friend.getUserId());                mShareChatMessage.setToUserId(coreManager.getSelf().getUserId());            }            coreManager.sendChatMessage(mShareChatMessage.getToUserId(), mShareChatMessage);        }        if (ChatMessageDao.getInstance().saveNewSingleChatMessage(coreManager.getSelf().getUserId(), friend.getUserId(), mShareChatMessage)) {            ListenerManager.getInstance().notifyNewMesssage(coreManager.getSelf().getUserId(), friend.getUserId(), mShareChatMessage, friend.getRoomFlag() == 1);        }    }    class ClickListener implements OnClickListener {        private Friend friend;        ClickListener(Friend friend) {            this.friend = friend;        }        @Override        public void onClick(View v) {            menuWindow.dismiss();            switch (v.getId()) {                case R.id.btn_send:                    verificationShare(3, friend);                    break;                case R.id.btn_cancle:                    break;                default:                    break;            }        }    }    class MessageRecentlyAdapter extends BaseAdapter {        private List<Friend> mFriends;        public MessageRecentlyAdapter(List<Friend> data) {            this.mFriends = data;        }        public List<Friend> getData() {            return mFriends;        }        public void setData(List<Friend> data) {            this.mFriends = data;            notifyDataSetChanged();        }        @Override        public int getCount() {            if (mFriends != null) {                return mFriends.size();            }            return 0;        }        @Override        public Object getItem(int position) {            if (mFriends != null) {                return mFriends.get(position);            }            return null;        }        @Override        public long getItemId(int position) {            if (mFriends != null) {                return position;            }            return 0;        }        @Override        public View getView(int position, View convertView, ViewGroup parent) {            ViewHolder holder;            if (convertView == null) {                convertView = View.inflate(ShareNearChatFriend.this, R.layout.item_recently_contacts, null);                holder = new ViewHolder();                holder.mIvHead = convertView.findViewById(R.id.iv_recently_contacts_head);                holder.mTvName = convertView.findViewById(R.id.tv_recently_contacts_name);                convertView.setTag(holder);            } else {                holder = (ViewHolder) convertView.getTag();            }            Friend friend = mFriends.get(position);            holder.mIvHead.fillData(friend);            holder.mTvName.setText(TextUtils.isEmpty(friend.getRemarkName()) ? friend.getNickName() : friend.getRemarkName());            return convertView;        }    }    class ViewHolder {        MessageAvatar mIvHead;        TextView mTvName;    }}