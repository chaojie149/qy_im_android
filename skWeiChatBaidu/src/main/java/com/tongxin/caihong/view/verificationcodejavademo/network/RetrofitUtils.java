package com.tongxin.caihong.view.verificationcodejavademo.network;import com.tongxin.caihong.MyApplication;import com.jakewharton.retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;import com.tongxin.caihong.ui.base.CoreManager;import java.util.concurrent.TimeUnit;import okhttp3.OkHttpClient;import retrofit2.Retrofit;import retrofit2.converter.gson.GsonConverterFactory;/** * Date:2020/5/19 * author:wuyan * Retrofit封装 */public class RetrofitUtils {    //设置默认超时时间    public static final int DEFAULT_TIME = 10;    private static final String TAG = "RetrofitUtils";    private static ServerApi mServerApi;    public static ServerApi getServerApi() {        if (mServerApi == null) {            synchronized (RetrofitUtils.class) {                if (mServerApi == null) {                    mServerApi = new RetrofitUtils().getRetrofit();                }            }        }        return mServerApi;    }    public ServerApi getRetrofit() {        ServerApi serverApi = initRetrofit(initOkHttp()).create(ServerApi.class);        return serverApi;    }    /**     * 初始化Retrofit     */    private Retrofit initRetrofit(OkHttpClient client) {        return new Retrofit.Builder()                .client(client)                .baseUrl(CoreManager.requireConfig(MyApplication.getContext()).apiUrl)                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())//添加Rxjava支持                .addConverterFactory(GsonConverterFactory.create())//添加GSON解析：返回数据转换成GSON类型                .build();    }    private OkHttpClient initOkHttp() {        return new OkHttpClient().newBuilder()                .readTimeout(DEFAULT_TIME, TimeUnit.SECONDS)//设置读取超时时间                .connectTimeout(DEFAULT_TIME, TimeUnit.SECONDS)//设置请求超时时间                .writeTimeout(DEFAULT_TIME, TimeUnit.SECONDS)//设置写入超时时间                .retryOnConnectionFailure(true)//设置出现错误进行重新连接                .build();    }}