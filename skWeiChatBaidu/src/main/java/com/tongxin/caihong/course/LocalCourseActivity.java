package com.tongxin.caihong.course;import android.annotation.SuppressLint;import android.content.Context;import android.content.Intent;import android.content.res.ColorStateList;import android.os.Bundle;import android.os.Handler;import android.os.Looper;import android.os.Message;import android.os.SystemClock;import android.text.TextUtils;import android.util.Log;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.Button;import android.widget.ImageView;import android.widget.TextView;import com.tongxin.caihong.AppConfig;import com.tongxin.caihong.R;import com.tongxin.caihong.Reporter;import com.tongxin.caihong.bean.Friend;import com.tongxin.caihong.bean.RoomMember;import com.tongxin.caihong.bean.event.MessageSendChat;import com.tongxin.caihong.bean.message.ChatMessage;import com.tongxin.caihong.bean.message.CourseBean;import com.tongxin.caihong.bean.message.CourseChatBean;import com.tongxin.caihong.bean.message.XmppMessage;import com.tongxin.caihong.db.dao.ChatMessageDao;import com.tongxin.caihong.db.dao.FriendDao;import com.tongxin.caihong.db.dao.RoomMemberDao;import com.tongxin.caihong.helper.DialogHelper;import com.tongxin.caihong.helper.PrivacySettingHelper;import com.tongxin.caihong.ui.base.BaseActivity;import com.tongxin.caihong.ui.tool.ButtonColorChange;import com.tongxin.caihong.util.AppUtils;import com.tongxin.caihong.util.Constants;import com.tongxin.caihong.util.DES;import com.tongxin.caihong.util.Md5Util;import com.tongxin.caihong.util.PermissionUtil;import com.tongxin.caihong.util.PreferenceUtils;import com.tongxin.caihong.util.SkinUtils;import com.tongxin.caihong.util.TimeUtils;import com.tongxin.caihong.util.ToastUtil;import com.tongxin.caihong.util.ViewHolder;import com.tongxin.caihong.view.PullToRefreshSlideListView;import com.tongxin.caihong.view.SelectionFrame;import com.tongxin.caihong.xmpp.listener.ChatMessageListener;import com.handmark.pulltorefresh.library.PullToRefreshBase;import com.roamer.slidelistview.SlideBaseAdapter;import com.roamer.slidelistview.SlideListView;import com.xuan.xuanhttplibrary.okhttp.HttpUtils;import com.xuan.xuanhttplibrary.okhttp.callback.BaseCallback;import com.xuan.xuanhttplibrary.okhttp.callback.ListCallback;import com.xuan.xuanhttplibrary.okhttp.result.ArrayResult;import com.xuan.xuanhttplibrary.okhttp.result.ObjectResult;import com.xuan.xuanhttplibrary.okhttp.result.Result;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.UUID;import de.greenrobot.event.EventBus;import de.greenrobot.event.Subscribe;import de.greenrobot.event.ThreadMode;import okhttp3.Call;/** * 我的课件 * * @author xuan * @version 1.0 */public class LocalCourseActivity extends BaseActivity {    boolean isRun;    int mPos;    private TextView tvRight;    private PullToRefreshSlideListView mPullToRefreshListView;    Runnable RefreComplete = new Runnable() {        @Override        public void run() {            mPullToRefreshListView.onRefreshComplete();        }    };    private List<CourseBean> mVideoFiles;    private List<String> mSelectedIdList;    private LocalCourseAdapter mAdapter;    private String mLoginUserId;    private Button mSure;    private boolean state; // 是否编辑模式    private int currtDateils;    private ArrayList<ChatMessage> mChatMessages;    private boolean isGroup;    private String toUserId;    private SuspenionWondow windowManager;    private TextView mTvSuspen;    private boolean isEncrypt;    private boolean isAllowSendFile;    @SuppressLint("HandlerLeak")    private Handler mHandlerChat = new Handler() {        @Override        public void dispatchMessage(Message msg) {            super.dispatchMessage(msg);            if (msg.what == -1) {                Constants.IS_SENDONG_COURSE_NOW = false;// 课程发送完成，修改发送状态                hideSuspensionWondow();                ToastUtil.showToast(LocalCourseActivity.this, getString(R.string.course_sent_success));                return;            }            if (mChatMessages.size() == 0) {                if (!CourseDateilsActivity.isCourseDetailClassSendHandler) {// todo 因为CourseDateilsActivity也有一个mHandler，需要坐下兼容处理                    Constants.IS_SENDONG_COURSE_NOW = false;// 讲课数量为0                    hideSuspensionWondow();                }                return;            }            if (!coreManager.isLogin()) {                Log.e("course", "!coreManager.isLogin()");                mPos = 0;                isRun = false;                Constants.IS_SENDONG_COURSE_NOW = false;                hideSuspensionWondow();                return;            }            mTvSuspen.setText(getString(R.string.send_now) + getString(R.string.sk_number) + " " + (msg.what + 1)                    + getString(R.string.mainviewcontroller_message) + "," + getString(R.string.weibodata_perzan2) + mChatMessages.size() +                    getString(R.string.article));            ChatMessage chatMessage = mChatMessages.get(msg.what);            if (!isAllowSendFile &&                    chatMessage.getType() == XmppMessage.TYPE_FILE) {                ToastUtil.showToast(mContext, getString(R.string.tip_cannot_upload_course_filter_file));                return;            }            // 数据解密            if (chatMessage.getIsEncrypt() == 1) {                // == 1                try {                    String decryptKey = Md5Util.toMD5(AppConfig.getApiKey() + chatMessage.getTimeSend() + chatMessage.getPacketId());                    String decryptContent = DES.decryptDES(chatMessage.getContent(), decryptKey);                    // 为chatMessage重新设值                    chatMessage.setContent(decryptContent);                    chatMessage.setIsEncrypt(0);                } catch (Exception e) {                    Reporter.unreachable(e);                }            }            // 重新加密，            if (isEncrypt) {                chatMessage.setIsEncrypt(1);            } else {                chatMessage.setIsEncrypt(0);            }            chatMessage.setFromId("");            chatMessage.setToId("");            chatMessage.setFromUserId(mLoginUserId);            chatMessage.setFromUserName(coreManager.getSelf().getNickName());            chatMessage.setToUserId(toUserId);            chatMessage.setIsReadDel(0);            chatMessage.setMySend(true);            chatMessage.setGroup(isGroup);            chatMessage.setPacketId(UUID.randomUUID().toString().replaceAll("-", ""));            chatMessage.setTimeSend(TimeUtils.sk_time_current_time());            ChatMessageDao.getInstance().saveNewSingleChatMessage(mLoginUserId, toUserId, chatMessage);            MessageSendChat chat = new MessageSendChat(isGroup, toUserId, chatMessage);            EventBus.getDefault().post(chat);        }    };    private Runnable sendMessageTask = new Runnable() {        @Override        public void run() {            while (isRun) {                mHandlerChat.sendEmptyMessage(mPos);                mPos++;                if (mPos == mChatMessages.size()) {                    // 最后一条已发送完成                    isRun = false;                    SystemClock.sleep(200);                    mHandlerChat.sendEmptyMessage(-1);                } else {                    long sleepTime = 100;                    SystemClock.sleep(sleepTime);                }            }        }    };    @SuppressLint("HandlerLeak")    private Handler mHandler = new Handler() {        @Override        public void dispatchMessage(Message msg) {            super.dispatchMessage(msg);            if (msg.what > mSelectedIdList.size()) {                sendDateils();                return;            }            mTvSuspen.setText(getString(R.string.downloading_cource_index_place_holder, msg.what));            SystemClock.sleep(200);            int i = msg.what - 1;            currtDateils++;            CourseBean courseBean = null;            for (CourseBean bean : mVideoFiles) {                if (TextUtils.equals(bean.getCourseId(), mSelectedIdList.get(i))) {                    courseBean = bean;                    break;                }            }            if (courseBean == null) {                Log.e("xuan", "sendListChat: send skip null");                return;            }            new Thread(new LoadDateilsTask(courseBean.getCourseId())).start();            Log.e("xuan", "sendListChat: " + courseBean.getCourseName());        }    };    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.layout_pullrefresh_list_slide);        mLoginUserId = coreManager.getSelf().getUserId();        mSure = (Button) findViewById(R.id.sure_btn);        ButtonColorChange.colorChange(this, mSure);        mVideoFiles = new ArrayList<>();        mSelectedIdList = new ArrayList<>();        mChatMessages = new ArrayList<>();        mAdapter = new LocalCourseAdapter(this);        initActivityBar();        initView();        isEncrypt = PrivacySettingHelper.getPrivacySettings(this).getIsEncrypt() == 1;        EventBus.getDefault().register(this);    }    @Override    protected void onDestroy() {        super.onDestroy();        EventBus.getDefault().unregister(this);    }    private void initActivityBar() {        getSupportActionBar().hide();        findViewById(R.id.iv_title_left).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                finish();            }        });        TextView tvTitle = (TextView) findViewById(R.id.tv_title_center);        tvTitle.setText(getString(R.string.my_lecture));        tvRight = (TextView) findViewById(R.id.tv_title_right);        tvRight.setVisibility(mAdapter.getCount() == 0 ? View.GONE : View.VISIBLE);        tvRight.setText(getString(R.string.multiselect));        tvRight.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (state) {                    mSelectedIdList.clear();                    mSure.setVisibility(View.GONE);                    tvRight.setText(getString(R.string.multiselect));                } else {                    mSure.setVisibility(View.VISIBLE);                    tvRight.setText(getString(R.string.cancel));                }                state = !state;                mAdapter.notifyDataSetChanged();            }        });    }    private void initView() {        mPullToRefreshListView = (PullToRefreshSlideListView) findViewById(R.id.pull_refresh_list);        View emptyView = LayoutInflater.from(mContext).inflate(R.layout.local_course_empty_view, null);        mPullToRefreshListView.setEmptyView(emptyView);        mPullToRefreshListView.getRefreshableView().setAdapter(mAdapter);        mPullToRefreshListView.setMode(PullToRefreshBase.Mode.PULL_FROM_START);        mPullToRefreshListView.setShowIndicator(false);        mPullToRefreshListView.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener<SlideListView>() {            @Override            public void onRefresh(PullToRefreshBase<SlideListView> refreshView) {                loadData();            }        });        mPullToRefreshListView.getRefreshableView().setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                position = (int) id;                CourseBean courseBean = mVideoFiles.get(position);                if (state) {                    String courseId = courseBean.getCourseId();                    if (mSelectedIdList.contains(courseId)) {                        mSelectedIdList.remove(courseId);                    } else {                        mSelectedIdList.add(courseId);                    }                    mAdapter.notifyDataSetChanged();                } else {                    Intent intent = new Intent(LocalCourseActivity.this, CourseDateilsActivity.class);                    intent.putExtra("data", courseBean.getCourseId());                    intent.putExtra("title", courseBean.getCourseName());                    startActivity(intent);                }            }        });        mSure.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                sendListChat();            }        });        DialogHelper.showDefaulteMessageProgressDialog(this);        loadData();    }    @Subscribe(threadMode = ThreadMode.MainThread)    public void helloEventBus(EventSendCourse message) {        if (SelectFriendsActivity.isIntentLocalCourseActivity) {            // 当前页面回调出来的Eventbus，才生效            toUserId = message.getToUserId();            isGroup = message.isGroup();            Friend friend = FriendDao.getInstance().getFriend(mLoginUserId, toUserId);            if (friend.getRoomFlag() != 0) {                boolean admin = false;                RoomMember member = RoomMemberDao.getInstance().getSingleRoomMember(friend.getRoomId(), mLoginUserId);                if (member != null && member.isGroupOwnerOrManager()) {                    admin = true;                }                boolean isAllowSendFileAgain = PreferenceUtils.getBoolean(mContext, Constants.IS_ALLOW_NORMAL_SEND_UPLOAD + toUserId, true);                if (!isAllowSendFileAgain && !admin) {                    isAllowSendFile = false;                } else {                    isAllowSendFile = true;                }            } else {                isAllowSendFile = true;            }            showSuspensionWondow();            mChatMessages.clear();            currtDateils = 1;            mHandler.sendEmptyMessage(currtDateils);        }    }    @Subscribe(threadMode = ThreadMode.MainThread)    public void helloEventBus(EventCourseRemoved message) {        Iterator<CourseBean> ite = mVideoFiles.iterator();        while (ite.hasNext()) {            CourseBean item = ite.next();            if (TextUtils.equals(item.getCourseId(), message.id)) {                ite.remove();                mAdapter.notifyDataSetChanged();                tvRight.setVisibility(mVideoFiles.size() > 0 ? View.VISIBLE : View.GONE);            }        }    }    private void loadData() {        Map<String, String> params = new HashMap<>();        params.put("access_token", coreManager.getSelfStatus().accessToken);        params.put("userId", mLoginUserId);        HttpUtils.get().url(coreManager.getConfig().USER_QUERY_COURSE)                .params(params)                .build()                .execute(new ListCallback<CourseBean>(CourseBean.class) {                    @Override                    public void onResponse(ArrayResult<CourseBean> result) {                        DialogHelper.dismissProgressDialog();                        if (Result.checkSuccess(mContext, result)) {                            mVideoFiles = result.getData();                            if (mVideoFiles == null) {                                // 至少不能为null，容易崩溃，                                mVideoFiles = new ArrayList<>();                            }                            mAdapter.notifyDataSetChanged();                            mPullToRefreshListView.postDelayed(RefreComplete, 200);                            tvRight.setVisibility(mVideoFiles.size() > 0 ? View.VISIBLE : View.GONE);                        }                    }                    @Override                    public void onError(Call call, Exception e) {                        DialogHelper.dismissProgressDialog();                        ToastUtil.showErrorNet(LocalCourseActivity.this);                        mPullToRefreshListView.postDelayed(RefreComplete, 200);                    }                });    }    private void fromatDatas(List<CourseChatBean> result) {        for (int i = 0; i < result.size(); i++) {            CourseChatBean data = result.get(i);            String messageBody = data.getMessage();            ChatMessage chatMessage = new ChatMessage(messageBody);            ChatMessageDao.getInstance().decrypt(chatMessage.isGroup(), chatMessage);            if (chatMessage.getType() == XmppMessage.TYPE_IMAGE                    || chatMessage.getType() == XmppMessage.TYPE_VIDEO                    || chatMessage.getType() == XmppMessage.TYPE_FILE) {                chatMessage.setUploadSchedule(100);                chatMessage.setUpload(true);            }            // messageI/from/to...在messageHead内            try {                JSONObject jsonObject1 = new JSONObject(messageBody);                JSONObject jsonObject2 = jsonObject1.getJSONObject("messageHead");                String messageId = jsonObject2.getString("messageId");                chatMessage.setPacketId(messageId);                chatMessage.setMySend(true);                chatMessage.setMessageState(ChatMessageListener.MESSAGE_SEND_SUCCESS);                mChatMessages.add(chatMessage);            } catch (JSONException e) {                e.printStackTrace();            }        }        mHandler.sendEmptyMessage(currtDateils);    }    /**     * 显示悬浮窗     */    private void showSuspensionWondow() {        mTvSuspen = new TextView(this);        mTvSuspen.setGravity(Gravity.CENTER);        mTvSuspen.setBackgroundResource(R.drawable.course_connors);        mTvSuspen.setTextAppearance(this, R.style.TextStyle);        mTvSuspen.setText(R.string.sending_course);        windowManager = new SuspenionWondow(LocalCourseActivity.this);        windowManager.show(mTvSuspen);    }    /**     * 隐藏悬浮窗     */    private void hideSuspensionWondow() {        windowManager.hide();    }    /**     * 修改课件名称     *     * @param position     */    private void updateName(int position) {        final CourseBean data = mVideoFiles.get(position);        DialogHelper.showLimitSingleInputDialog(this,                getString(R.string.modify_name)                , data.getCourseName(), getString(R.string.input_course_name)                , text -> {                    if (TextUtils.isEmpty(text)) {                        ToastUtil.showToast(this, getString(R.string.name_course_error));                        return false;                    }                    if (TextUtils.equals(data.getCourseName(), text)) {                        return true;                    }                    DialogHelper.showDefaulteMessageProgressDialog(LocalCourseActivity.this);                    Map<String, String> params = new HashMap<>();                    params.put("access_token", coreManager.getSelfStatus().accessToken);                    params.put("courseId", data.getCourseId());                    params.put("courseName", text);                    params.put("updateTime", TimeUtils.sk_time_current_time() + "");                    HttpUtils.get().url(coreManager.getConfig().USER_EDIT_COURSE)                            .params(params)                            .build()                            .execute(new BaseCallback<Void>(Void.class) {                                @Override                                public void onResponse(ObjectResult<Void> result) {                                    DialogHelper.dismissProgressDialog();                                    if (Result.checkSuccess(mContext, result)) {                                        ToastUtil.showToast(LocalCourseActivity.this, getString(R.string.update_sccuess));                                        data.setCourseName(text);                                        mAdapter.notifyDataSetChanged();                                    }                                }                                @Override                                public void onError(Call call, Exception e) {                                    DialogHelper.dismissProgressDialog();                                    ToastUtil.showErrorNet(LocalCourseActivity.this);                                }                            });                    return true;                });    }    private boolean delete(final int position) {        final CourseBean data = mVideoFiles.get(position);        DialogHelper.showDefaulteMessageProgressDialog(this);        Map<String, String> params = new HashMap<>();        params.put("access_token", coreManager.getSelfStatus().accessToken);        params.put("courseId", data.getCourseId());        HttpUtils.get().url(coreManager.getConfig().USER_DEL_COURSE)                .params(params)                .build()                .execute(new BaseCallback<Void>(Void.class) {                    @Override                    public void onResponse(ObjectResult<Void> result) {                        DialogHelper.dismissProgressDialog();                        if (Result.checkSuccess(mContext, result)) {                            ToastUtil.showToast(LocalCourseActivity.this, R.string.delete_all_succ);                            mSelectedIdList.remove(data.getCourseId());                            mVideoFiles.remove(position);                            mAdapter.notifyDataSetChanged();                            tvRight.setVisibility(mVideoFiles.size() > 0 ? View.VISIBLE : View.GONE);                        }                    }                    @Override                    public void onError(Call call, Exception e) {                        DialogHelper.dismissProgressDialog();                        ToastUtil.showToast(LocalCourseActivity.this, R.string.delete_failed);                    }                });        return true;    }    private void sendDateils() {        ToastUtil.showToast(LocalCourseActivity.this, getString(R.string.all_course_complete));        Log.e("xuan", "sendDateils: " + mChatMessages.size());        mPos = 0;        isRun = true;        new Thread(sendMessageTask).start();    }    private void sendListChat() {        if (mSelectedIdList.size() == 0) {            ToastUtil.showToast(this, getString(R.string.need_a_course));            return;        }        if (AppUtils.checkAlertWindowsPermission(this)) { // 已开启悬浮窗权限            startActivity(new Intent(mContext, SelectFriendsActivity.class));            SelectFriendsActivity.isIntentLocalCourseActivity = true;        } else {            SelectionFrame selectionFrame = new SelectionFrame(this);            selectionFrame.setSomething(null, getString(R.string.av_no_float), new SelectionFrame.OnSelectionFrameClickListener() {                @Override                public void cancelClick() {                }                @Override                public void confirmClick() {                    PermissionUtil.startApplicationDetailsSettings(LocalCourseActivity.this, 0x01);                }            });            selectionFrame.show();        }    }    private class LocalCourseAdapter extends SlideBaseAdapter {        public LocalCourseAdapter(Context context) {            super(context);        }        @Override        public int getCount() {            return mVideoFiles == null ? 0 : mVideoFiles.size();        }        @Override        public Object getItem(int position) {            return position;        }        @Override        public long getItemId(int position) {            return position;        }        @Override        public View getView(final int position, View convertView, ViewGroup parent) {            if (convertView == null) {                convertView = createConvertView(position);            }            TextView tvNema = ViewHolder.get(convertView, R.id.item_name);            TextView tvTime = ViewHolder.get(convertView, R.id.item_time);            TextView tvCheckBox = ViewHolder.get(convertView, R.id.item_checkbox);            ImageView tvNext = ViewHolder.get(convertView, R.id.item_next_iv);            TextView edit_tv = ViewHolder.get(convertView, R.id.top_tv);            edit_tv.setText(getString(R.string.modify_name));            edit_tv.setVisibility(View.VISIBLE);            TextView delete_tv = ViewHolder.get(convertView, R.id.delete_tv);            if (getCount() == 0) {                new Handler(Looper.getMainLooper()).post(() -> tvRight.setVisibility(View.GONE));            } else {                new Handler(Looper.getMainLooper()).post(() -> tvRight.setVisibility(View.VISIBLE));            }            final CourseBean courseBean = mVideoFiles.get(position);            if (state) {                tvNext.setVisibility(View.GONE);                tvCheckBox.setVisibility(View.VISIBLE);                if (mSelectedIdList.contains(courseBean.getCourseId())) {                    int value = mSelectedIdList.indexOf(courseBean.getCourseId()) + 1;                    tvCheckBox.setText(String.valueOf(value));                    tvCheckBox.setBackgroundResource(R.drawable.bg_radio_blu);                    tvCheckBox.setBackgroundTintList(ColorStateList.valueOf(SkinUtils.getSkin(mContext).getAccentColor()));                } else {                    tvCheckBox.setText("");                    tvCheckBox.setBackgroundResource(R.drawable.bg_radio_no);                    tvCheckBox.setBackgroundTintList(null);                }            } else {                tvNext.setVisibility(View.VISIBLE);                tvCheckBox.setVisibility(View.GONE);            }            long time = courseBean.getCreateTime();            tvNema.setText(getString(R.string.coursename) + ": " + courseBean.getCourseName() + "(" + courseBean.getMessageIds().size() + ")");            tvTime.setText(getString(R.string.create_chat_time) + ": " + TimeUtils.long_to_yMdHm_str(time * 1000));            edit_tv.setOnClickListener(v -> {                updateName(position);            });            delete_tv.setOnClickListener(v -> {                delete(position);            });            return convertView;        }        @Override        public int getFrontViewId(int position) {            return R.layout.item_course_list;        }        @Override        public int getLeftBackViewId(int position) {            return 0;        }        @Override        public int getRightBackViewId(int position) {            return R.layout.row_item_delete;        }    }    class LoadDateilsTask implements Runnable {        String courseId;        public LoadDateilsTask(String id) {            courseId = id;        }        @Override        public void run() {            Map<String, String> params = new HashMap<>();            params.put("access_token", coreManager.getSelfStatus().accessToken);            params.put("courseId", courseId);            HttpUtils.get().url(coreManager.getConfig().USER_COURSE_DATAILS)                    .params(params)                    .build()                    .execute(new ListCallback<CourseChatBean>(CourseChatBean.class) {                        @Override                        public void onResponse(ArrayResult<CourseChatBean> result) {                            if (Result.checkSuccess(mContext, result)) {                                fromatDatas(result.getData());                            }                        }                        @Override                        public void onError(Call call, Exception e) {                            mHandler.sendEmptyMessage(currtDateils);                        }                    });        }    }}